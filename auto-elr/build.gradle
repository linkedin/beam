/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { id 'org.apache.beam.module' }
applyJavaNature(
    automaticModuleName: 'org.apache.beam.auto-elr'
)

// This module depends on all the necessary beam modules that required at Linkedin.
// Its primary purpose is to help scripts identify all modules via transitive dependencies instead of enumerating all modules individually.
// With this, we only need to set auto ELR job instead of having one auto ELR job per module.
dependencies {
  implementation project(":model:pipeline")

  implementation project(":runners:core-construction-java")
  implementation project(":runners:core-java")
  implementation project(":runners:java-fn-execution")
  implementation project(":runners:samza")
  implementation project(":runners:spark:2")
  implementation project(":runners:spark:3")
  implementation project(":runners:portability:java")

  implementation project(":sdks:java:core")
  implementation project(":sdks:java:extensions:join-library")
  implementation project(":sdks:java:extensions:sorter")
  implementation project(":sdks:java:extensions:sql")
  implementation project(":sdks:java:io:hadoop-common")
  implementation project(":sdks:java:io:hadoop-file-system")
  implementation project(":sdks:java:io:hadoop-format")
  implementation project(":sdks:java:io:kafka")
}

// Enforce the publish task of this auto-elr module to be executed after other modules
tasks.all { task ->
  if (task.path == ":auto-elr:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository") {
    task.mustRunAfter(":model:pipeline:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")

    task.mustRunAfter(":runners:core-construction-java:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":runners:core-java:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":runners:java-fn-execution:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":runners:samza:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":runners:spark:2:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":runners:spark:3:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":runners:portability:java:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")

    task.mustRunAfter(":sdks:java:core:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":sdks:java:extensions:join-library:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":sdks:java:extensions:sorter:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":sdks:java:extensions:sql:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":sdks:java:io:hadoop-common:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":sdks:java:io:hadoop-file-system:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":sdks:java:io:hadoop-format:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
    task.mustRunAfter(":sdks:java:io:kafka:publishMavenJavaPublicationToLinkedin.jfrog.httpsRepository")
  }
}